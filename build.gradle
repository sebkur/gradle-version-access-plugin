wrapper {
    gradleVersion = '8.3'
}

apply plugin: 'eclipse'
apply plugin: 'com.gradle.plugin-publish'

group = pGroup
version = pVersion
description = pDescription

java {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

if (project.hasProperty("topobyte")) {
    apply from: 'file:///' + System.getProperty("user.home") \
          + '/.gradle/topobyte.gradle'
}

buildscript {
    dependencies {
        classpath 'junit:junit:4.13.1'
        classpath 'com.gradle.publish:plugin-publish-plugin:1.2.1'
    }
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

repositories {
    mavenCentral()
}

def pomInfo = new XmlSlurper().parse(file('info.pom'));

gradlePlugin {
    website = 'http://www.topobyte.de'
    vcsUrl = 'https://github.com/sebkur/gradle-version-access-plugin'
    description = 'Topobyte version access plugin'

    plugins {
        versionInfoPlugin {
            id = 'de.topobyte.version-access-gradle-plugin'
            displayName = 'Topobyte version access plugin'
            implementationClass = 'de.topobyte.gradle.VersionAccessPlugin'
            description = "$pomInfo.description"
            website = "$pomInfo.url"
        }
    }
}

tasks.withType(Javadoc).configureEach {
    enabled = false
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            pom {
                name = "$pomInfo.name"
                description = "$pomInfo.description"
                url = "$pomInfo.url"
                licenses {
                    license {
                        name = "$pomInfo.licenseName"
                        url = "$pomInfo.licenseUrl"
                        distribution = "$pomInfo.licenseDistribution"
                    }
                }
            }
        }
    }
}

if (project.hasProperty("publishForTesting")) {
    publishing {
        repositories {
            maven {
                url = 'maven-repo'
            }
        }
    }
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}
